// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbUserConfigFieldNames          = builder.RawFieldNames(&TbUserConfig{})
	tbUserConfigRows                = strings.Join(tbUserConfigFieldNames, ",")
	tbUserConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(tbUserConfigFieldNames, "`iId`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	tbUserConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(tbUserConfigFieldNames, "`iId`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"

	cacheTbUserConfigIIdPrefix       = "cache:tbUserConfig:iId:"
	cacheTbUserConfigSUserNamePrefix = "cache:tbUserConfig:sUserName:"
)

type (
	tbUserConfigModel interface {
		Insert(ctx context.Context, data *TbUserConfig) (sql.Result, error)
		FindOne(ctx context.Context, iId int64) (*TbUserConfig, error)
		FindOneBySUserName(ctx context.Context, sUserName string) (*TbUserConfig, error)
		Update(ctx context.Context, data *TbUserConfig) error
		Delete(ctx context.Context, iId int64) error
	}

	defaultTbUserConfigModel struct {
		sqlc.CachedConn
		table string
	}

	TbUserConfig struct {
		IId          int64     `db:"iId"`          // 用户自增id
		SUserName    string    `db:"sUserName"`    // 用户名
		SPassword    string    `db:"sPassword"`    // 密码
		DtCreateTime time.Time `db:"dtCreateTime"` // 创建时间
		DtUpdateTime time.Time `db:"dtUpdateTime"` // 修改时间
	}
)

func newTbUserConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTbUserConfigModel {
	return &defaultTbUserConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tbUserConfig`",
	}
}

func (m *defaultTbUserConfigModel) Delete(ctx context.Context, iId int64) error {
	data, err := m.FindOne(ctx, iId)
	if err != nil {
		return err
	}

	tbUserConfigIIdKey := fmt.Sprintf("%s%v", cacheTbUserConfigIIdPrefix, iId)
	tbUserConfigSUserNameKey := fmt.Sprintf("%s%v", cacheTbUserConfigSUserNamePrefix, data.SUserName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `iId` = ?", m.table)
		return conn.ExecCtx(ctx, query, iId)
	}, tbUserConfigIIdKey, tbUserConfigSUserNameKey)
	return err
}

func (m *defaultTbUserConfigModel) FindOne(ctx context.Context, iId int64) (*TbUserConfig, error) {
	tbUserConfigIIdKey := fmt.Sprintf("%s%v", cacheTbUserConfigIIdPrefix, iId)
	var resp TbUserConfig
	err := m.QueryRowCtx(ctx, &resp, tbUserConfigIIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `iId` = ? limit 1", tbUserConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, iId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserConfigModel) FindOneBySUserName(ctx context.Context, sUserName string) (*TbUserConfig, error) {
	tbUserConfigSUserNameKey := fmt.Sprintf("%s%v", cacheTbUserConfigSUserNamePrefix, sUserName)
	var resp TbUserConfig
	err := m.QueryRowIndexCtx(ctx, &resp, tbUserConfigSUserNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `sUserName` = ? limit 1", tbUserConfigRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sUserName); err != nil {
			return nil, err
		}
		return resp.IId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserConfigModel) Insert(ctx context.Context, data *TbUserConfig) (sql.Result, error) {
	tbUserConfigIIdKey := fmt.Sprintf("%s%v", cacheTbUserConfigIIdPrefix, data.IId)
	tbUserConfigSUserNameKey := fmt.Sprintf("%s%v", cacheTbUserConfigSUserNamePrefix, data.SUserName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, tbUserConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SUserName, data.SPassword, data.DtCreateTime, data.DtUpdateTime)
	}, tbUserConfigIIdKey, tbUserConfigSUserNameKey)
	return ret, err
}

func (m *defaultTbUserConfigModel) Update(ctx context.Context, newData *TbUserConfig) error {
	data, err := m.FindOne(ctx, newData.IId)
	if err != nil {
		return err
	}

	tbUserConfigIIdKey := fmt.Sprintf("%s%v", cacheTbUserConfigIIdPrefix, data.IId)
	tbUserConfigSUserNameKey := fmt.Sprintf("%s%v", cacheTbUserConfigSUserNamePrefix, data.SUserName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `iId` = ?", m.table, tbUserConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.SUserName, newData.SPassword, newData.DtCreateTime, newData.DtUpdateTime, newData.IId)
	}, tbUserConfigIIdKey, tbUserConfigSUserNameKey)
	return err
}

func (m *defaultTbUserConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTbUserConfigIIdPrefix, primary)
}

func (m *defaultTbUserConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `iId` = ? limit 1", tbUserConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTbUserConfigModel) tableName() string {
	return m.table
}

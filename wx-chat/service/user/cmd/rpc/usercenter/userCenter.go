// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package usercenter

import (
	"context"

	"wx-chat/service/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserReq = __.AddUserReq
	CommonRes  = __.CommonRes
	UserReq    = __.UserReq
	UserRes    = __.UserRes

	UserCenter interface {
		FindUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error)
		AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*CommonRes, error)
		UpdateUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*CommonRes, error)
	}

	defaultUserCenter struct {
		cli zrpc.Client
	}
)

func NewUserCenter(cli zrpc.Client) UserCenter {
	return &defaultUserCenter{
		cli: cli,
	}
}

func (m *defaultUserCenter) FindUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error) {
	client := __.NewUserCenterClient(m.cli.Conn())
	return client.FindUser(ctx, in, opts...)
}

func (m *defaultUserCenter) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*CommonRes, error) {
	client := __.NewUserCenterClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

func (m *defaultUserCenter) UpdateUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*CommonRes, error) {
	client := __.NewUserCenterClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}
